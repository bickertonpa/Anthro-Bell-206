# Extract full forward and aft values from the control data
cyclic_limits <- df_range_of_motion %>%
filter(adjustment == "cyclic_fwd") %>%
dplyr::select(min, max) %>%
slice(1)  # In case there's more than one row
df <- df_motion %>%
mutate(
ID = as.numeric(ID),
cyclic_pct_fwd = ((cyclic_limits$max-fwd_deg)/(cyclic_limits$max-cyclic_limits$min))*100
) %>%
left_join(df_anthros %>% mutate(ID = as.numeric(ID)), by = "ID")
cor_test_result <- cor.test(df$`Thumbtip Reach`, df$cyclic_pct_fwd, method = "pearson")
cor_value <- round(cor_test_result$estimate, 2)
# Print detailed summary
print(cor_test_result)
ggplot(df, aes(x = `Thumbtip Reach`, y = cyclic_pct_fwd)) +
geom_point(size = 3, color = "steelblue") +
labs(
title = "Zone 1 Cyclic Control Motion (% fwd) vs. Thumbtip Reach",
subtitle = paste0("Pearson correlation: r = ", cor_value),
x = "Thumbtip Reach (mm)",
y = "Cyclic Control Motion (% fwd)"
) +
geom_text(
data = df %>% as.data.frame(),
aes(label = ID, x = `Thumbtip Reach`, y = cyclic_pct_fwd),
vjust = -1, hjust = 1, size = 3
) +
# Correlation line with 95% CI
geom_smooth(method = "lm", se = TRUE,level = 0.95, color = "blue", linewidth = 0.8) +
theme_minimal()
# Fit linear model
model <- lm(cyclic_pct_fwd ~ `Thumbtip Reach` +
`Acromial Height - Sitting`, data = df)
step_model <- stepAIC(model, direction = "both")
summary(step_model)
# Generate predicted values and confidence intervals
df$cyclic_pct_fwd_predicted <- predict(step_model)
pred_frame <- data.frame(
predicted = df$cyclic_pct_fwd_predicted,
actual = df$cyclic_pct_fwd,
ID = df$ID
)
# Extract coefficients and R-squared
coefs <- coef(step_model)
eq <- paste0(
"fwd_deg = ", round(coefs[1], 2),
ifelse(coefs[2] < 0, " - ", " + "), abs(round(coefs[2], 2)), " × ", names(coefs)[2]
)
if (length(coefs) > 2) {
for (i in 3:length(coefs)) {
eq <- paste0(
eq,
ifelse(coefs[i] < 0, " - ", " + "), abs(round(coefs[i], 2)), " × ", names(coefs)[i]
)
}
}
r_squared <- summary(step_model)$r.squared
subtitle_text <- paste(eq, sprintf("  |  R² = %.2f", r_squared))
ggplot(pred_frame, aes(x = predicted, y = actual)) +
geom_point(size = 3, color = "steelblue") +
geom_smooth(method = "lm", se = TRUE, level = 0.95, color = "black", fill = "lightblue", linetype = "solid") +
labs(
title = "Predicted vs Actual Zone 1 Cyclic Fwd Reach (%)",
subtitle = subtitle_text,
x = "Predicted Zone 1 Fwd Cyclic (%)",
y = "Actual Zone 1 Fwd Cyclic (%)"
) +
geom_text(
data = pred_frame %>% as.data.frame(),
aes(label = ID, x = predicted, y = actual),
vjust = -1, hjust = 1, size = 3
) +
theme(
plot.margin = margin(t = 10, r = 50, b = 10, l = 10)
) +
geom_hline(yintercept = 60, linetype = "dashed", color = "red") + # ONV requirement (arbitrary -12 degree requirement)+
annotate("text", x = Inf, y = 60, label = "Disccommodated", hjust = 1.1, vjust = 1.5, color = "red")+
theme_minimal()
ggsave("plots/Predicted vs. Actual Zone 1 Cyclic Fwd Reach.png", plot = last_plot(), width = 9.5, height = 5, dpi = 200,bg="white")
df_new$cyclic_zone1_predicted <- predict(step_model, newdata = df_new)
df_summary <- df_new %>%
mutate(predicted_class = ifelse(cyclic_zone1_predicted < 60, "Dissaccommodated", "Accommodated")) %>%
group_by(Sex, predicted_class) %>%
count() %>%
group_by(Sex) %>%
mutate(percentage = round(100 * n / sum(n), 1)) %>%
ungroup()
kable(df_summary, caption = "Accommodation of Cyclic Control Motion - Zone 1 (60% fwd)")
# #Join anthros
# Extract full forward and aft values from the control data
rudder_limits <- df_range_of_motion %>%
filter(adjustment == "rudder") %>%
dplyr::select(min, max) %>%
slice(1)  # In case there's more than one row
df <- df_rudder %>%
mutate(
ID = as.numeric(ID),
rudder_pct_fwd = (rudder_mm/(rudder_limits$max-rudder_limits$min))*100
) %>%
left_join(df_anthros %>% mutate(ID = as.numeric(ID)), by = "ID")
cor_test_result <- cor.test(df$`Combo Leg`, df$rudder_mm, method = "pearson")
cor_value <- round(cor_test_result$estimate, 2)
# Print detailed summary
print(cor_test_result)
ggplot(df, aes(x = `Combo Leg`, y = rudder_mm)) +
geom_point(size = 3, color = "steelblue") +
labs(
title = "Rudder Carriage Position vs. Combo Leg",
subtitle = paste0("Pearson correlation: r = ", cor_value),
x = "Combo Leg (Buttock Knee Length + Knee Height - Sitting) (mm)",
y = "Maximum Fwd Rudder Carriage Position (mm)"
) +
scale_x_continuous(limits = c(1090,1125)) +
geom_text(
data = df %>% as.data.frame(),
aes(label = ID, x = `Combo Leg`, y = rudder_mm),
vjust = -1, hjust = 1, size = 3
) +
# Correlation line with 95% CI
geom_smooth(method = "lm", se = TRUE,level = 0.95, color = "blue", linewidth = 0.8) +
theme_minimal()
# Fit linear model
model <- lm(rudder_mm ~  `Combo Leg`, data = df)
step_model <- stepAIC(model, direction = "both")
summary(step_model)
# Generate predicted values and confidence intervals
df$rudder_mm_predicted <- predict(step_model)
pred_frame <- data.frame(
predicted = df$rudder_mm_predicted,
actual = df$rudder_mm,
ID = df$ID
)
# Extract coefficients and R-squared
coefs <- coef(step_model)
eq <- paste0(
"Rudder Position Forward = ", round(coefs[1], 2),
ifelse(coefs[2] < 0, " - ", " + "), abs(round(coefs[2], 2)), " × ", names(coefs)[2]
)
if (length(coefs) > 2) {
for (i in 3:length(coefs)) {
eq <- paste0(
eq,
ifelse(coefs[i] < 0, " - ", " + "), abs(round(coefs[i], 2)), " × ", names(coefs)[i]
)
}
}
r_squared <- summary(step_model)$r.squared
subtitle_text <- paste(eq, sprintf("  |  R² = %.2f", r_squared))
ggplot(pred_frame, aes(x = predicted, y = actual)) +
geom_point(size = 3, color = "steelblue") +
geom_smooth(method = "lm", se = TRUE, level = 0.95, color = "black", fill = "lightblue", linetype = "solid") +
labs(
title = "Predicted vs Actual Maximum Rudder Position",
subtitle = subtitle_text,
x = "Predicted Maximum Forward Rudder Carriage Position (mm)",
y = "Actual Maximum Forward Rudder Carriage Position (mm)"
) +
scale_y_continuous(limits = c(0,150)) +
scale_x_continuous(limits = c(0,150)) +
geom_text(
data = pred_frame %>% as.data.frame(),
aes(label = ID, x = predicted, y = actual),
vjust = -1, hjust = 1, size = 3
) +
theme(
plot.margin = margin(t = 10, r = 50, b = 10, l = 10)
) +
theme_minimal()
ggsave("plots/Predicted vs. Actual Reach to Rudder Pedals.png", plot = last_plot(), width = 9.5, height = 5, dpi = 200,bg="white")
df_new$rudder_predicted <- predict(step_model, newdata = df_new)
df_summary <- df_new %>%
mutate(predicted_class = ifelse(rudder_predicted < 0, "Dissaccommodated", "Accommodated")) %>%
group_by(Sex, predicted_class) %>%
count() %>%
group_by(Sex) %>%
mutate(percentage = round(100 * n / sum(n), 1)) %>%
ungroup()
kable(df_summary, caption = "Accommodation of Reach to Rudder Pedals")
#Join anthros
controls <- c(
"low_rpm_mm",
"ctrl_boost_mm"
)
df_reach_joined <- df_hand_reach %>%
mutate(
ID = as.numeric(ID)
) %>%
pivot_longer(cols = controls, names_to = "control", values_to = "x-to") %>%
left_join(df_controls, by = "control") %>%
left_join(df_anthros %>% mutate(ID = as.numeric(ID)), by = "ID") %>%
mutate(
miss_mm = case_when(
control_type == "thumb" ~ `x-to` - `left_x_to_thumb`,
control_type == "finger" ~ `x-to` - `left_x_to_finger`,
TRUE ~ NA_real_  # fallback in case of unexpected control_type
),
equiv_thumbtip_reach = `x-to` + miss_mm
)
# Account for depression activation of "finger" controls
df_reach_joined <- df_reach_joined %>%
mutate(
miss_mm = case_when(
control_type == "finger" ~ miss_mm + 3, # button depression
TRUE ~ miss_mm  # keep original value for all other types
)
)
# Zone 1 - RPM
df <- df_reach_joined %>% filter(
control == "low_rpm_mm",
zone == 1
)
cor_test_result <- cor.test(df$miss_mm, df$`Thumbtip Reach`, method = "pearson")
cor_value <- round(cor_test_result$estimate, 2)
# Print detailed summary
print(cor_test_result)
ggplot(df, aes(x = `Thumbtip Reach`, y = miss_mm)) +
geom_point(size = 3, color = "steelblue") +
labs(
title = "Zone 1 Miss to Low RPM Button vs. Thumbtip Reach",
subtitle = paste0("Pearson correlation: r = ", cor_value),
x = "Thumbtip Reach (mm)",
y = "Zone 1 Miss Distance (mm)"
) +
geom_text(
data = df %>% as.data.frame(),
aes(label = ID, x = `Thumbtip Reach`, y = miss_mm),
vjust = -1, hjust = 1, size = 3
) +
# Correlation line with 95% CI
geom_smooth(method = "lm", se = TRUE,level = 0.95, color = "blue", linewidth = 0.8) +
theme_minimal()
# Fit linear model
model <- lm(miss_mm ~ `Thumbtip Reach` +
`Acromial Height - Sitting`, data = df)
step_model <- stepAIC(model, direction = "both")
summary(step_model)
# Generate predicted values and confidence intervals
df$miss_mm_predicted <- predict(step_model)
pred_frame <- data.frame(
predicted = df$miss_mm_predicted,
actual = df$miss_mm,
ID = df$ID
)
# Extract coefficients and R-squared
coefs <- coef(step_model)
eq <- paste0(
"Miss Distance = ", round(coefs[1], 2),
ifelse(coefs[2] < 0, " - ", " + "), abs(round(coefs[2], 2)), " × ", names(coefs)[2]
)
if (length(coefs) > 2) {
for (i in 3:length(coefs)) {
eq <- paste0(
eq,
ifelse(coefs[i] < 0, " - ", " + "), abs(round(coefs[i], 2)), " × ", names(coefs)[i]
)
}
}
r_squared <- summary(step_model)$r.squared
subtitle_text <- paste(eq, sprintf("  |  R² = %.2f", r_squared))
ggplot(pred_frame, aes(x = predicted, y = actual)) +
geom_point(size = 3, color = "steelblue") +
geom_smooth(method = "lm", se = TRUE, level = 0.95, color = "black", fill = "lightblue", linetype = "solid") +
labs(
title = "Predicted vs Actual Zone 1 Miss to LOW ROTOR Push Button",
subtitle = subtitle_text,
x = "Predicted Zone 1 Miss to LOW ROTOR Push Button (mm)",
y = "Actual Zone 1 Miss to LOW ROTOR Push Button(mm)"
) +
geom_text(
data = pred_frame %>% as.data.frame(),
aes(label = ID, x = predicted, y = actual),
vjust = -1, hjust = 1, size = 3
) +
theme(
plot.margin = margin(t = 10, r = 50, b = 10, l = 10)
) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") + # ONV requirement (arbitrary -12 degree requirement)+
annotate("text", x = Inf, y = -12, label = "Dissaccommodated", hjust = 1.1, vjust = -2.5, color = "red")+
theme_minimal()
ggsave("plots/Predicted vs. Actual Zone 1 LOW ROTOR.png", plot = last_plot(), width = 9.5, height = 5, dpi = 200,bg="white")
df_new$rpm_zone1_predicted <- predict(step_model, newdata = df_new)
df_summary <- df_new %>%
mutate(predicted_class = ifelse(rpm_zone1_predicted > 0, "Dissaccommodated", "Accommodated")) %>%
group_by(Sex, predicted_class) %>%
count() %>%
group_by(Sex) %>%
mutate(percentage = round(100 * n / sum(n), 1)) %>%
ungroup()
kable(df_summary, caption = "Accommodation of Zone 1 Reach to Low Rotor RPM")
# Zone 1 - Control Boost
df <- df_reach_joined %>% filter(
control == "ctrl_boost_mm",
zone == 1
)
cor_test_result <- cor.test(df$miss_mm, df$`Thumbtip Reach`, method = "pearson")
cor_value <- round(cor_test_result$estimate, 2)
# Print detailed summary
print(cor_test_result)
ggplot(df, aes(x = `Thumbtip Reach`, y = miss_mm)) +
geom_point(size = 3, color = "steelblue") +
labs(
title = "Zone 1 Miss to Control Boost vs. Thumbtip Reach",
subtitle = paste0("Pearson correlation: r = ", cor_value),
x = "Thumbtip Reach (mm)",
y = "Zone 1 Miss Distance (mm)"
) +
geom_text(
data = df %>% as.data.frame(),
aes(label = ID, x = `Thumbtip Reach`, y = miss_mm),
vjust = -1, hjust = 1, size = 3
) +
# Correlation line with 95% CI
geom_smooth(method = "lm", se = TRUE,level = 0.95, color = "blue", linewidth = 0.8) +
theme_minimal()
# Fit linear model
model <- lm(miss_mm ~ `Thumbtip Reach` +
`Acromial Height - Sitting`, data = df)
step_model <- stepAIC(model, direction = "both")
summary(step_model)
# Generate predicted values and confidence intervals
df$miss_mm_predicted <- predict(step_model)
pred_frame <- data.frame(
predicted = df$miss_mm_predicted,
actual = df$miss_mm,
ID = df$ID
)
# Extract coefficients and R-squared
coefs <- coef(step_model)
eq <- paste0(
"Miss Distance = ", round(coefs[1], 2),
ifelse(coefs[2] < 0, " - ", " + "), abs(round(coefs[2], 2)), " × ", names(coefs)[2]
)
if (length(coefs) > 2) {
for (i in 3:length(coefs)) {
eq <- paste0(
eq,
ifelse(coefs[i] < 0, " - ", " + "), abs(round(coefs[i], 2)), " × ", names(coefs)[i]
)
}
}
r_squared <- summary(step_model)$r.squared
subtitle_text <- paste(eq, sprintf("  |  R² = %.2f", r_squared))
ggplot(pred_frame, aes(x = predicted, y = actual)) +
geom_point(size = 3, color = "steelblue") +
geom_smooth(method = "lm", se = TRUE, level = 0.95, color = "black", fill = "lightblue", linetype = "solid") +
labs(
title = "Predicted vs Actual Zone 1 Miss to Control Boost Toggle Switch",
subtitle = subtitle_text,
x = "Predicted Zone 1 Miss to Control Boost Toggle Switch (mm)",
y = "Actual Zone 1 Miss to Control Boost Toggle Switch"
) +
geom_text(
data = pred_frame %>% as.data.frame(),
aes(label = ID, x = predicted, y = actual),
vjust = -1, hjust = 1, size = 3
) +
theme(
plot.margin = margin(t = 10, r = 50, b = 10, l = 10)
) +
theme_minimal()
ggsave("plots/Predicted vs. Actual Zone 1 CONTROL BOOST.png", plot = last_plot(), width = 9.5, height = 5, dpi = 200,bg="white")
df_new$ctrl_boost_predicted <- predict(step_model, newdata = df_new)
df_summary <- df_new %>%
mutate(predicted_class = ifelse(ctrl_boost_predicted > 0, "Dissaccommodated", "Accommodated")) %>%
group_by(Sex, predicted_class) %>%
count() %>%
group_by(Sex) %>%
mutate(percentage = round(100 * n / sum(n), 1)) %>%
ungroup()
kable(df_summary, caption = "Accommodation of Zone 1 Reach to Control Boost Toggle Switch")
# write CFAS with predicted performance
write.csv(df_new, "output/CFAS_predicted.csv", row.names = FALSE)
df_seat_positions <- read_sheet("https://docs.google.com/spreadsheets/d/1ZP8djxCW8M4S3qmLSWnqe8YVQoUlXagu-mWTaeU3V0Q/edit?gid=0#gid=0") %>% as.data.frame()
#Join anthros
df <- df_onv_737 %>%
mutate(
ID = as.numeric(ID),
seat_up_mm = case_when(
seat_up_step == 0 & seat_fwd_step == 0 ~ 0,
seat_up_step == 0 & seat_fwd_step == 1 ~ df_seat_positions$y_mm[df_seat_positions$pos == "down_fwd"] - df_seat_positions$y_mm[df_seat_positions$pos == "down_aft"],
seat_up_step == 1 & seat_fwd_step == 0 ~ df_seat_positions$y_mm[df_seat_positions$pos == "up_aft"] - df_seat_positions$y_mm[df_seat_positions$pos == "down_aft"],
seat_up_step == 1 & seat_fwd_step == 1 ~ df_seat_positions$y_mm[df_seat_positions$pos == "up_fwd"]  - df_seat_positions$y_mm[df_seat_positions$pos == "down_aft"]
),
seat_fwd_mm = case_when(
seat_up_step == 0 & seat_fwd_step == 0 ~ 0,
seat_up_step == 0 & seat_fwd_step == 1 ~  df_seat_positions$x_mm[df_seat_positions$pos == "down_aft"] - df_seat_positions$x_mm[df_seat_positions$pos == "down_fwd"],
seat_up_step == 1 & seat_fwd_step == 0 ~ df_seat_positions$x_mm[df_seat_positions$pos == "down_aft"] - df_seat_positions$x_mm[df_seat_positions$pos == "up_aft"],
seat_up_step == 1 & seat_fwd_step == 1 ~ df_seat_positions$x_mm[df_seat_positions$pos == "down_aft"] - df_seat_positions$x_mm[df_seat_positions$pos == "up_fwd"]
),
seat_pos = case_when(
seat_up_step == 0 & seat_fwd_step == 0 ~ "down_aft",
seat_up_step == 0 & seat_fwd_step == 1 ~ "down_fwd",
seat_up_step == 1 & seat_fwd_step == 0 ~ "up_aft",
seat_up_step == 1 & seat_fwd_step == 1 ~ "up_fwd",
)
) %>%
left_join(df_anthros %>% mutate(ID = as.numeric(ID)), by = "ID")
df_UpAft <- df %>%
filter(
seat_up_step == 1,
seat_fwd_step == 0,
recline_up == 1
)
cor_test_result <- cor.test(df_UpAft$`Eye Height - Sitting`, df_UpAft$onv_deg, method = "pearson")
cor_value <- round(cor_test_result$estimate, 2)
# Print detailed summary
print(cor_test_result)
ggplot(df_UpAft, aes(x = `Eye Height - Sitting`, y = onv_deg)) +
geom_point(size = 3, color = "steelblue") +
labs(
title = "Over the Nose Vision vs. Eye Height Sitting (Up, Aft)",
subtitle = paste0("Pearson correlation: r = ", cor_value),
x = "Eye Height - Sitting (mm)",
y = "External Vision Over the Nose (degrees)"
) +
geom_text(
data = df_UpAft %>% as.data.frame(),
aes(label = ID, x = `Eye Height - Sitting`, y = onv_deg),
vjust = -1, hjust = 1, size = 3
) +
# Correlation line with 95% CI
geom_smooth(method = "lm", se = TRUE,level = 0.95, color = "blue", linewidth = 0.8) +
geom_hline(yintercept = 13, linetype = "dashed", color = "red") + # ONV requirement (arbitrary -12 degree requirement)+
annotate("text", x = Inf, y = 13, label = "Accommodated", hjust = 1.1, vjust = -0.5, color = "blue")+
annotate("text", x = Inf, y = 13, label = "Disccommodated", hjust = 1.1, vjust = 1.5, color = "red")+
theme_minimal()
# Fit linear model
df <- df %>%
filter(
recline_up == 1
)
model <- lm(onv_deg ~ `Eye Height - Sitting` +
seat_up_step +
seat_fwd_step, data = df)
step_model <- stepAIC(model, direction = "both")
summary(step_model)
# Add predicted values to the original dataframe
df$onv_deg_predicted <- predict(step_model)
# Generate predicted values and confidence intervals
df$onv_deg_predicted <- predict(step_model)
pred_frame <- data.frame(
predicted = df$onv_deg_predicted,
actual = df$onv_deg,
ID = df$ID,
seat_pos = df$seat_pos
)
# Extract coefficients and R-squared
coefs <- coef(step_model)
eq <- paste0(
"ONV = ", round(coefs[1], 2),
ifelse(coefs[2] < 0, " - ", " + "), abs(round(coefs[2], 2)), " × ", names(coefs)[2]
)
if (length(coefs) > 2) {
for (i in 3:length(coefs)) {
eq <- paste0(
eq,
ifelse(coefs[i] < 0, " - ", " + "), abs(round(coefs[i], 2)), " × ", names(coefs)[i]
)
}
}
r_squared <- summary(step_model)$r.squared
subtitle_text <- paste(eq, sprintf("  |  R² = %.2f", r_squared))
ggplot(pred_frame, aes(x = predicted, y = actual, color = seat_pos)) +
geom_point(size = 3) +
geom_smooth(method = "lm", se = TRUE, level = 0.95, color = "black", fill = "lightblue", linetype = "solid") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
labs(
title = "Predicted vs Actual Over-the-Nose Vision (ONV)",
subtitle = subtitle_text,
x = "Predicted ONV (degrees)",
y = "Actual ONV (degrees)"
) +
geom_text(
data = pred_frame %>% as.data.frame(),
aes(label = ID, x = predicted, y = actual),
vjust = -1, hjust = 1, size = 3,
show.legend = FALSE
) +
theme(
plot.margin = margin(t = 10, r = 80, b = 10, l = 10)
) +
geom_hline(yintercept = 12, linetype = "dashed", color = "red") + # ONV requirement (arbitrary -12 degree requirement)+
annotate("text", x = Inf, y = 12, label = "Accommodated", hjust = 1.1, vjust = -0.5, color = "blue")+
annotate("text", x = Inf, y = 12, label = "Disccommodated", hjust = 1.1, vjust = 1.5, color = "red")+
theme_minimal()
ggsave("plots/Predicted vs. Actual Beoing 737 ONV.png", plot = last_plot(), width = 9.5, height = 5, dpi = 200,bg="white")
subtitle_text
# Create 4 configurations per participant
df_expanded <- bind_rows(
df_new %>% mutate(seat_up_step = 0, seat_fwd_step = 0, seat_config = "down_aft"),
df_new %>% mutate(seat_up_step = 1, seat_fwd_step = 1, seat_config = "up_fwd"), # no data was collected from this seat setting to inform the model
df_new %>% mutate(seat_up_step = 1, seat_fwd_step = 0, seat_config = "up_aft"),
df_new %>% mutate(seat_up_step = 0, seat_fwd_step = 1, seat_config = "down_fwd")
)
df_expanded$y_predicted <- predict(step_model, newdata = df_expanded)
df_summary <- df_expanded %>%
group_by(ID, Sex) %>%
summarise(
any_accommodated = any(y_predicted > 12), # functional requirement
.groups = "drop"
) %>%
mutate(
predicted_class = ifelse(any_accommodated, "Accommodated", "Dissaccommodated")
) %>%
group_by(Sex, predicted_class) %>%
count() %>%
group_by(Sex) %>%
mutate(percentage = round(100 * n / sum(n), 1)) %>%
ungroup()
kable(df_summary, caption = "Accommodation of Boeing 737 ONV (13 degrees)")
sessionInfo()
