# # Correlation line with 95% CI
#   geom_smooth(method = "lm", se = TRUE,level = 0.95, color = "blue", linewidth = 0.8) +
#
#   theme_minimal()
#
# # Fit linear model
#
# model <- lm(full_right_passive_mm ~ `Buttock-Knee Length` +
#               `Combo Leg`+ `Knee Height - Sitting`, data = df)
# step_model <- stepAIC(model, direction = "both")
# summary(step_model)
#
# # Generate predicted values and confidence intervals
# df$full_right_passive_mm_predicted <- predict(step_model)
# pred_frame <- data.frame(
#   predicted = df$full_right_passive_mm_predicted,
#   actual = df$full_right_passive_mm,
#   ID = df$ID
# )
#
# # Extract coefficients and R-squared
# coefs <- coef(step_model)
# eq <- paste0(
#   "Shin Clearance = ", round(coefs[1], 2),
#   ifelse(coefs[2] < 0, " - ", " + "), abs(round(coefs[2], 2)), " × ", names(coefs)[2]
# )
#
# if (length(coefs) > 2) {
#   for (i in 3:length(coefs)) {
#     eq <- paste0(
#       eq,
#       ifelse(coefs[i] < 0, " - ", " + "), abs(round(coefs[i], 2)), " × ", names(coefs)[i]
#     )
#   }
# }
#
# r_squared <- summary(step_model)$r.squared
# subtitle_text <- paste(eq, sprintf("  |  R² = %.2f", r_squared))
#
# ggplot(pred_frame, aes(x = predicted, y = actual)) +
#   geom_point(size = 3, color = "steelblue") +
#   geom_smooth(method = "lm", se = TRUE, level = 0.95, color = "black", fill = "lightblue", linetype = "solid") +
#   geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
#   labs(
#     title = "Predicted vs Actual Shin Clearance",
#     subtitle = subtitle_text,
#     x = "Predicted Shin Clearance (mm)",
#     y = "Actual Shin Clearance (mm)"
#   ) +
#   geom_text(
#     data = pred_frame %>% as.data.frame(),
#     aes(label = ID, x = predicted, y = actual),
#     vjust = -1, hjust = 1, size = 3
#   ) +
#   theme(
#   plot.margin = margin(t = 10, r = 50, b = 10, l = 10)
# ) +
#   theme_minimal()
#Join anthros
# Extract full forward and aft values from the control data
cyclic_limits <- df_range_of_motion %>%
filter(adjustment == "cyclic_fwd") %>%
dplyr::select(min, max) %>%
slice(1)  # In case there's more than one row
df <- df_motion %>%
mutate(
ID = as.numeric(ID),
cyclic_pct_fwd = ((cyclic_limits$max-fwd_deg)/(cyclic_limits$max-cyclic_limits$min))*100
) %>%
left_join(df_anthros %>% mutate(ID = as.numeric(ID)), by = "ID")
cor_test_result <- cor.test(df$`Thumbtip Reach`, df$cyclic_pct_fwd, method = "pearson")
cor_value <- round(cor_test_result$estimate, 2)
# Print detailed summary
print(cor_test_result)
ggplot(df, aes(x = `Thumbtip Reach`, y = cyclic_pct_fwd)) +
geom_point(size = 3, color = "steelblue") +
labs(
title = "Zone 1 Cyclic Control Motion (% fwd) vs. Thumbtip Reach",
subtitle = paste0("Pearson correlation: r = ", cor_value),
x = "Thumbtip Reach (mm)",
y = "Cyclic Control Motion (% fwd)"
) +
geom_text(
data = df %>% as.data.frame(),
aes(label = ID, x = `Thumbtip Reach`, y = cyclic_pct_fwd),
vjust = -1, hjust = 1, size = 3
) +
# Correlation line with 95% CI
geom_smooth(method = "lm", se = TRUE,level = 0.95, color = "blue", linewidth = 0.8) +
theme_minimal()
# Fit linear model
model <- lm(cyclic_pct_fwd ~ `Thumbtip Reach` +
`Acromial Height - Sitting`, data = df)
step_model <- stepAIC(model, direction = "both")
summary(step_model)
# Generate predicted values and confidence intervals
df$cyclic_pct_fwd_predicted <- predict(step_model)
pred_frame <- data.frame(
predicted = df$cyclic_pct_fwd_predicted,
actual = df$cyclic_pct_fwd,
ID = df$ID
)
# Extract coefficients and R-squared
coefs <- coef(step_model)
eq <- paste0(
"fwd_deg = ", round(coefs[1], 2),
ifelse(coefs[2] < 0, " - ", " + "), abs(round(coefs[2], 2)), " × ", names(coefs)[2]
)
if (length(coefs) > 2) {
for (i in 3:length(coefs)) {
eq <- paste0(
eq,
ifelse(coefs[i] < 0, " - ", " + "), abs(round(coefs[i], 2)), " × ", names(coefs)[i]
)
}
}
r_squared <- summary(step_model)$r.squared
subtitle_text <- paste(eq, sprintf("  |  R² = %.2f", r_squared))
ggplot(pred_frame, aes(x = predicted, y = actual)) +
geom_point(size = 3, color = "steelblue") +
geom_smooth(method = "lm", se = TRUE, level = 0.95, color = "black", fill = "lightblue", linetype = "solid") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
labs(
title = "Predicted vs Actual Zone 1 Cyclic Fwd Reach (%)",
subtitle = subtitle_text,
x = "Predicted Zone 1 Fwd Cyclic (%)",
y = "Actual Zone 1 Fwd Cyclic (%)"
) +
geom_text(
data = pred_frame %>% as.data.frame(),
aes(label = ID, x = predicted, y = actual),
vjust = -1, hjust = 1, size = 3
) +
theme(
plot.margin = margin(t = 10, r = 50, b = 10, l = 10)
) +
theme_minimal()
# df_performance <- df_performance %>%
#   rename(
#     c('Fwd' = 'DERP_Down'),
#     c('Up' = 'DERP_Up'),
#     c('ID' = 'Participant')
#   ) %>%
#     mutate(
#     Up = Up * 10, # cockpit data sheets in cm
#     Fwd = Fwd * 10, # cockpit data sheets in cm
#     ID = as.character(ID)
#   ) %>%
#     mutate(
#     Up = if_else(
#       `Seat Pos` %in% c("Seat full down/aft", "Seat full down/fwd",
#                         "Seat full up/aft", "Seat full up/fwd"),
#       case_when(
#         `Seat Pos` == "Seat full down/aft" ~ 398,
#         `Seat Pos` == "Seat full down/fwd" ~ 398,
#         `Seat Pos` == "Seat full up/aft" ~ 550,
#         `Seat Pos` == "Seat full up/fwd" ~ 550
#       ),
#       Up  # assuming Up is already numeric
#     ),
#     Fwd = if_else(
#       `Seat Pos` %in% c("Seat full down/aft", "Seat full down/fwd",
#                         "Seat full up/aft", "Seat full up/fwd"),
#       case_when(
#         `Seat Pos` == "Seat full down/aft" ~ 0,
#         `Seat Pos` == "Seat full down/fwd" ~ 180+30,
#         `Seat Pos` == "Seat full up/aft" ~ 0,
#         `Seat Pos` == "Seat full up/fwd" ~ 180+30
#       ),
#       Fwd
#     )
#   )
#
# df_vision <- df_performance %>% dplyr::select(ID,Seat, Friend_Hos, `Seat Pos`, Up, Fwd, Ext_Vision)
#
# # fill in seat positions
#
# df_vision_wider <- df_vision %>%
#   dplyr::select(
#     -Up,-Fwd
#   ) %>%
#   pivot_wider(
#     names_from = `Seat Pos`,
#     values_from = Ext_Vision
#   )
#
# df_vision_friendly <- df_vision %>% filter(Friend_Hos == "- FRIENDLY", Seat == "LEFT SEAT")
# df_vision_hostile <- df_vision %>% filter(Friend_Hos == "- HOSTILE", Seat == "LEFT SEAT")
#
# # FUll UP / AFT
#
# vision_plot <- df_vision_friendly %>%
#   left_join (df_anthros,by = 'ID') %>%
#   filter(
#     `Seat Pos` == "Seat full up/aft"
#   )
#
# cor_test_result <- cor.test(vision_plot$`Eye Height - Sitting`, vision_plot$Ext_Vision, method = "pearson")
# cor_value <- round(cor_test_result$estimate, 2)
#
# # Print detailed summary
# print(cor_test_result)
#
# ggplot(vision_plot, aes(x = `Eye Height - Sitting`, y = Ext_Vision)) +
#   geom_point(size = 3, color = "steelblue") +
#   labs(
#     title = "External Vision vs. Eye Height (Sitting) (FULL UP/AFT)",
#     subtitle = paste0("Pearson correlation: r = ", cor_value),
#     x = "Eye Height - Sitting (mm)",
#     y = "External Vision Over the Nose (degrees)"
#   ) +
#   scale_x_continuous(
#     limits = c(600, 900)
#   ) +
#   scale_y_continuous(
#     limits = c(-20,0)
#   ) +
#   scale_y_reverse()+
#   geom_text(
#     data = vision_plot %>% as.data.frame(),
#     aes(label = Name, x = `Eye Height - Sitting`, y = Ext_Vision),
#     vjust = -1, hjust = 1, size = 3
#   ) +
# # Correlation line with 95% CI
#   geom_smooth(method = "lm", se = TRUE,level = 0.95, color = "blue", linewidth = 0.8) +
#
#   theme_minimal()
#
# # FUll DERP
#
# vision_plot <- df_vision_friendly %>%
#   left_join (df_anthros,by = 'ID') %>%
#   filter(
#     `Seat Pos` == "Seat at DERP"
#   )
#
# cor_test_result <- cor.test(vision_plot$`Eye Height - Sitting`, vision_plot$Ext_Vision, method = "pearson")
# cor_value <- round(cor_test_result$estimate, 2)
#
# # Print detailed summary
# print(cor_test_result)
#
# ggplot(vision_plot, aes(x = `Eye Height - Sitting`, y = Ext_Vision)) +
#   geom_point(size = 3, color = "steelblue") +
#   labs(
#     title = "External Vision vs. Eye Height (Sitting) (DERP)",
#     subtitle = paste0("Pearson correlation: r = ", cor_value),
#     x = "Eye Height - Sitting (mm)",
#     y = "External Vision Over the Nose (degrees)"
#   ) +
#   scale_x_continuous(
#     limits = c(600, 900)
#   ) +
#   scale_y_continuous(
#     limits = c(-20,0)
#   ) +
#   scale_y_reverse()+
#   geom_text(
#     data = vision_plot %>% as.data.frame(),
#     aes(label = Name, x = `Eye Height - Sitting`, y = Ext_Vision),
#     vjust = -1, hjust = 1, size = 3
#   ) +
# # Correlation line with 95% CI
#   geom_smooth(method = "lm", se = TRUE,level = 0.95, color = "blue", linewidth = 0.8) +
#
#   theme_minimal()
# Rudder Pedal Reach
# df_rudder <- df_performance %>%
#   dplyr::select(
#     ID,Seat, Friend_Hos, `Seat Pos`, Up, Fwd, Rudder_FF
#     ) %>%
#   filter(
#     Seat == "LEFT SEAT",
#     Friend_Hos == "- FRIENDLY"
#   )
#
# df_rudder <- df_rudder %>%
#   mutate(
#     Rudder_FF_chr = as.character(Rudder_FF),  # safely coerce to character
#     Rudder_FF_num = suppressWarnings(as.numeric(Rudder_FF_chr)),  # safely coerce numeric
#     PassFail = case_when(
#       !is.na(Rudder_FF_num) & Rudder_FF_num >= 0 ~ "Pass",
#       !is.na(Rudder_FF_num) & Rudder_FF_num < 0  ~ "Fail",
#       grepl("fail", Rudder_FF_chr, ignore.case = TRUE) ~ "Fail",
#       TRUE ~ NA_character_
#     )
#   ) %>%
#     left_join (df_anthros,by = 'ID')
#
# rudder_plot <- df_rudder %>%
#   filter(
#     `Seat Pos` == "Seat full up/aft"
#   )
#
# cor_test_result <- cor.test(rudder_plot$`Combo Leg`, rudder_plot$Rudder_FF_num, method = "pearson")
# cor_value <- round(cor_test_result$estimate, 2)
#
# ggplot(rudder_plot, aes(x = `Combo Leg`, y = Rudder_FF_num)) +
#   geom_point(size = 3, color = "steelblue") +
#   labs(
#     title = "Further Forward Rudder Pedal Adjustment (Full Up / Full Aft)",
#     subtitle = paste0("Pearson correlation: r = ", cor_value),
#     x = "Combo Leg (mm)",
#     y = "Rudder Pedal Setting (in)"
#   )+
#   geom_text(
#     data = rudder_plot %>% as.data.frame(),
#     aes(label = Name, x = `Combo Leg`, y = Rudder_FF_num),
#     vjust = -1, hjust = 1, size = 3
#   ) +
# # Correlation line with 95% CI
#   geom_smooth(method = "lm", se = TRUE,level = 0.95, color = "blue", linewidth = 0.8) +
#
#   theme_minimal()
#
# rudder_plot <- df_rudder %>%
#   filter(
#     `Seat Pos` == "Seat full down/aft"
#   )
#
# cor_test_result <- cor.test(rudder_plot$`Combo Leg`, rudder_plot$Rudder_FF_num, method = "pearson")
# cor_value <- round(cor_test_result$estimate, 2)
#
# ggplot(rudder_plot, aes(x = `Combo Leg`, y = Rudder_FF_num)) +
#   geom_point(size = 3, color = "steelblue") +
#   labs(
#     title = "Further Forward Rudder Pedal Adjustment (Full Down / Full Aft)",
#     subtitle = paste0("Pearson correlation: r = ", cor_value),
#     x = "Combo Leg (mm)",
#     y = "Rudder Pedal Setting (in)"
#   )+
#   geom_text(
#     data = rudder_plot %>% as.data.frame(),
#     aes(label = Name, x = `Combo Leg`, y = Rudder_FF_num),
#     vjust = -1, hjust = 1, size = 3
#   ) +
# # Correlation line with 95% CI
#   geom_smooth(method = "lm", se = TRUE,level = 0.95, color = "blue", linewidth = 0.8) +
#
#   theme_minimal()
#
# rudder_plot <- df_rudder %>%
#   filter(
#     `Seat Pos` == "Seat full up/fwd"
#   )
#
# cor_test_result <- cor.test(rudder_plot$`Combo Leg`, rudder_plot$Rudder_FF_num, method = "pearson")
# cor_value <- round(cor_test_result$estimate, 2)
#
# ggplot(rudder_plot, aes(x = `Combo Leg`, y = Rudder_FF_num)) +
#   geom_point(size = 3, color = "steelblue") +
#   labs(
#     title = "Further Forward Rudder Pedal Adjustment (Full Up / Full Fwd)",
#     subtitle = paste0("Pearson correlation: r = ", cor_value),
#     x = "Combo Leg (mm)",
#     y = "Rudder Pedal Setting (in)"
#   )+
#   geom_text(
#     data = rudder_plot %>% as.data.frame(),
#     aes(label = Name, x = `Combo Leg`, y = Rudder_FF_num),
#     vjust = -1, hjust = 1, size = 3
#   ) +
# # Correlation line with 95% CI
#   geom_smooth(method = "lm", se = TRUE,level = 0.95, color = "blue", linewidth = 0.8) +
#
#   theme_minimal()
# Reach to controls
# df_reach <- df_performance %>%
#   dplyr::select(
#     ID,Seat, Friend_Hos, `Seat Pos`, Up, Fwd, Master_Caution...8, `CNE/CB`, LandGear_LP, Aux_Pump, LP_pilot, APU, Control_boost, Fire_panel, Throttle_Quad, TQA, Wing_Flap_Ctrl, SEP, SRCH
#     ) %>%
#   filter(
#     Seat == "LEFT SEAT",
#     Friend_Hos == "- FRIENDLY"
#   )
#
# df_reach_AUX <- df_reach %>%
#   dplyr::select(ID, `Seat Pos`, Aux_Pump, Up, Fwd) %>%
#   mutate(
#     Aux_Pump = as.character(Aux_Pump),  # Coerce to character first
#     Aux_Pump = str_trim(Aux_Pump),      # Remove whitespace (optional but helpful)
#     Aux_Pump = case_when(
#       Aux_Pump %in% c("no data", "NULL", "") ~ NA_character_,
#       TRUE ~ Aux_Pump
#     )
#   ) %>%
#   distinct() %>%  # optional, removes duplicates
#   pivot_wider(
#     names_from = `Seat Pos`,
#     values_from = Aux_Pump
#   )
#
# # estimate pass reaches for ID 5 and others based on similar controls
#
# df_reach_AUX <- df_reach_AUX %>%
#   mutate(
#     Pass = as.numeric(`Seat at DERP`),
#     Pass = if_else(ID == 5, 15.2, Pass),
#     Pass = if_else(ID == 11, 14.7, Pass),
#
#     # Coerce columns to numeric before conditional replacement
#     `Seat full up/aft` = if_else(ID == 11, 14.7, as.numeric(`Seat full up/aft`)),
#     `Seat full up/fwd` = if_else(ID == 11, 14.7, as.numeric(`Seat full up/fwd`)),
#     `Seat full down/fwd` = if_else(ID == 11, 14.7, as.numeric(`Seat full down/fwd`))
#   )
#
# df_reach_AUX <- df_reach_AUX %>%
#   mutate(
#     miss_DERP = as.numeric(`Seat at DERP`) - Pass,  # would be zero
#     miss_UpAft = as.numeric(`Seat full up/aft`) - Pass,  # would be zero
#     miss_UpFwd = as.numeric(`Seat full up/fwd`) - Pass,  # would be zero
#     miss_DownAft = as.numeric(`Seat full down/aft`) - Pass,  # would be zero
#     miss_DownFwd = as.numeric(`Seat full down/fwd`) - Pass  # would be zero
#   )
#
# df_reach_AUX <- df_reach_AUX %>%
#     left_join (df_anthros,by = 'ID')
# predictor <- df_reach_AUX$`Thumbtip Reach`+ df_reach_AUX$`Acromial Height - Sitting`
# seat_cond <- df_reach_AUX$miss_DownAft
#
# cor_test_result <- cor.test(predictor, seat_cond, method = "pearson")
# cor_value <- round(cor_test_result$estimate, 2)
#
# ggplot(df_reach_AUX, aes(x = predictor, y = seat_cond)) +
#   geom_point(size = 3, color = "steelblue") +
#   labs(
#     title = "Reach Miss of AUX Pump",
#     subtitle = paste0("Pearson correlation: r = ", cor_value),
#     x = "Reach Estimate (mm)",
#     y = "Reach / Miss (cm)"
#   )+
#   geom_text(
#     data = df_reach_AUX %>% as.data.frame(),
#     aes(label = Name, x = predictor, y = seat_cond),
#     vjust = -1, hjust = 1, size = 3
#   ) +
# # Correlation line with 95% CI
#   geom_smooth(method = "lm", se = TRUE,level = 0.95, color = "blue", linewidth = 0.8) +
#
#   theme_minimal()
#
# df_reach_AUX_fail <- df_reach_AUX %>%
#   filter(
#     ID %in% c(5,6,8,10)
#   )
# model <- lm(miss_UpAft ~ `Thumbtip Reach` + `Acromial Height - Sitting` + `Biacromial Breadth` + Stature + , data = df_reach_AUX_fail)
# step_model <- stepAIC(model, direction = "both")
# summary(step_model)
#
# predictions <- predict(step_model, interval = "confidence", level = 0.90)
#
# # Combine actual and predicted values into a new dataframe
# plot_df <- df_reach_AUX_fail %>%
#   mutate(
#     actual = miss_UpAft,
#     predicted = predictions[, "fit"],
#     lower90 = predictions[, "lwr"],
#     upper90 = predictions[, "upr"]
#   )
#
# # Plot
# ggplot(plot_df, aes(x = predicted, y = actual)) +
#   geom_point(color = "steelblue", size = 3) +
#   geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
#   geom_ribbon(aes(ymin = lower90, ymax = upper90), fill = "lightblue", alpha = 0.3) +
#   labs(
#     title = "Predicted vs Actual Reach Miss Distance",
#     x = "Predicted miss_UpAft",
#     y = "Actual miss_UpAft"
#   ) +
#   theme_minimal()
#
#
# model <- lm(`Seat full up/aft` ~ `Thumbtip Reach`, data = df_reach_AUX_fail)
# summary(model)
# plot(model)
sessionInfo()
View(df_anthros)
anthro_summary_m <- sample_anthro_percentile %>% dplyr::select(-Weight)
sample_scaled_pop <- scale_sample_based_on_population(df_anthros_m,pop_m %>% dplyr::select(-'Source',-Weight))
sample_scaled_pop <- scale_sample_based_on_population(df_anthros_m,pop_m %>% dplyr::select(-'Source',-Weight))
scaled_sample <- sample_scaled_pop$scaled_sample
sample_percentile <- sample_scaled_pop$sample_percentiles
sample_anthro_percentile <- percentile_table(df_anthros_m,sample_percentile)
write.csv(sample_anthro_percentile, "output/anthro_percentile_m.csv", row.names = FALSE)
anthro_summary_m <- sample_anthro_percentile
# Suppose 'my_wide_df' is your data frame with 20 columns
block_1 <- anthro_summary_m %>% dplyr::select(1:5)
block_2 <- anthro_summary_m %>% dplyr::select(6:10)
block_3 <- anthro_summary_m %>% dplyr::select(11:15)
block_4 <- anthro_summary_m %>% dplyr::select(16:19)
# In your .Rmd body
kable(block_1, caption = "Male Block 1: Variables 1–5")
kable(block_2, caption = "Male Block 2: Variables 6–10")
kable(block_3, caption = "Male Block 3: Variables 11–15")
kable(block_4, caption = "Male Block 4: Variables 16–20")
sample_scaled_pop <- scale_sample_based_on_population(df_anthros_f,pop_f%>% dplyr::select(-'Source',-Weight))
scaled_sample <- sample_scaled_pop$scaled_sample
sample_percentile <- sample_scaled_pop$sample_percentiles
sample_anthro_percentile <- percentile_table(df_anthros_f,sample_percentile)
write.csv(sample_anthro_percentile, "output/anthro_percentile_f.csv", row.names = FALSE)
anthro_summary_f <- sample_anthro_percentile
# Suppose 'my_wide_df' is your data frame with 20 columns
block_1 <- anthro_summary_f %>% dplyr::select(1:5)
block_2 <- anthro_summary_f %>% dplyr::select(6:10)
block_3 <- anthro_summary_f %>% dplyr::select(11:15)
block_4 <- anthro_summary_f %>% dplyr::select(16:19)
# In your .Rmd body
kable(block_1, caption = "Female Block 1: Variables 1–5")
kable(block_2, caption = "Female Block 2: Variables 6–10")
kable(block_3, caption = "Female Block 3: Variables 11–15")
kable(block_4, caption = "Female Block 4: Variables 16–20")
